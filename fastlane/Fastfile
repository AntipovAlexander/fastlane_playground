lane :makeBuild do |options|
    begin
        gradle(task: "test")
        makeBuild(options[:buildType])
    rescue => exception
        say "exception! #{exception.to_s}"
        onError(exception, options[:buildType])
        exit(false)
    end
end

def makeBuild(buildType)
    case buildType
        when "debug"
            gradle(task: "clean assembleDebug")
        when "staging"
            gradle(task: "clean assembleStaging")
        when "release"
            gradle(task: "clean assembleRelease")
        else
            raise ArgumentError, "You need to pass build type as parameter. Like this: buildType:release. Available build types: debug, staging, release"
        end
end

def onError(exception, buildType)
   slack(
       username: "Android",
       icon_url: "http://icons.iconarchive.com/icons/danleech/simple/1024/android-icon.png",
       message: "#{buildType} build is failed!",
       success: false,
       default_payloads: [:git_branch, :git_author],
       attachment_properties: {
           fields: [
               {
                   title: "Error message",
                   value: exception.to_s,
                   short: false
               }
           ]
       }
   )
end

after_all do |lane, options|
    crashlytics(notifications: true)
    slack(
            username: "Android",
            icon_url: "http://icons.iconarchive.com/icons/danleech/simple/1024/android-icon.png",
            message: "#{options[:buildType]} build is available!\n https://fabric.io/_/beta",
            success: true,
            default_payloads: [:git_branch, :git_author]
    )
end